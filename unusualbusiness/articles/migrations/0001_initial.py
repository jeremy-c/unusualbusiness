# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-06-21 13:49
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import unusualbusiness.utils.models
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailembeds.blocks
import wagtail.wagtailimages.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0028_merge'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_nl', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('slug_en', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('slug_nl', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('url_path_en', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('url_path_nl', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('seo_title_nl', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('search_description_nl', models.TextField(blank=True, null=True, verbose_name='search description')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='AuthorIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_nl', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('slug_en', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('slug_nl', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('url_path_en', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('url_path_nl', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('seo_title_nl', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('search_description_nl', models.TextField(blank=True, null=True, verbose_name='search description')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='AuthorPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_nl', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('slug_en', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('slug_nl', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('url_path_en', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('url_path_nl', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('seo_title_nl', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('search_description_nl', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('biography', models.TextField(blank=True, help_text='The biography of the author (max. 150 woorden)', verbose_name='biography')),
                ('biography_en', models.TextField(blank=True, help_text='The biography of the author (max. 150 woorden)', null=True, verbose_name='biography')),
                ('biography_nl', models.TextField(blank=True, help_text='The biography of the author (max. 150 woorden)', null=True, verbose_name='biography')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NewsArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_nl', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('slug_en', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('slug_nl', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('url_path_en', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('url_path_nl', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('seo_title_nl', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('search_description_nl', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is Featured on home page')),
                ('subtitle', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, verbose_name='subtitle')),
                ('subtitle_en', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, null=True, verbose_name='subtitle')),
                ('subtitle_nl', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, null=True, verbose_name='subtitle')),
                ('featured', wagtail.wagtailcore.fields.StreamField([('featured_image', wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=True))])), ('featured_video', wagtail.wagtailcore.blocks.StructBlock([(b'video', wagtail.wagtailembeds.blocks.EmbedBlock(required=True))])), ('featured_audio', wagtail.wagtailcore.blocks.StructBlock([(b'audio', wagtail.wagtailembeds.blocks.EmbedBlock(required=True))]))])),
                ('publication_date', models.DateField(blank=True, default=django.utils.timezone.now, help_text='The publication date of the article', null=True, verbose_name='publication_date')),
                ('body', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))])),
                ('body_en', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))], null=True)),
                ('body_nl', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))], null=True)),
                ('format', models.CharField(choices=[(b'event', 'Activity'), (b'images', 'Slideshow'), (b'audio', 'Audio'), (b'video', 'Video')], default='event', max_length=32, verbose_name='page_format')),
            ],
            options={
                'verbose_name': 'News or report article',
                'verbose_name_plural': 'News or report articles',
            },
            bases=('wagtailcore.page', models.Model, unusualbusiness.utils.models.RenderInlineMixin, unusualbusiness.utils.models.RelatedHowToMixin),
        ),
        migrations.CreateModel(
            name='StoryArticleIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_nl', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('slug_en', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('slug_nl', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('url_path_en', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('url_path_nl', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('seo_title_nl', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('search_description_nl', models.TextField(blank=True, null=True, verbose_name='search description')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='StoryArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_nl', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('slug_en', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('slug_nl', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('url_path_en', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('url_path_nl', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('seo_title_nl', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('search_description_nl', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is Featured on home page')),
                ('subtitle', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, verbose_name='subtitle')),
                ('subtitle_en', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, null=True, verbose_name='subtitle')),
                ('subtitle_nl', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, null=True, verbose_name='subtitle')),
                ('featured', wagtail.wagtailcore.fields.StreamField([('featured_image', wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=True))])), ('featured_video', wagtail.wagtailcore.blocks.StructBlock([(b'video', wagtail.wagtailembeds.blocks.EmbedBlock(required=True))])), ('featured_audio', wagtail.wagtailcore.blocks.StructBlock([(b'audio', wagtail.wagtailembeds.blocks.EmbedBlock(required=True))]))])),
                ('publication_date', models.DateField(blank=True, default=django.utils.timezone.now, help_text='The publication date of the article', null=True, verbose_name='publication_date')),
                ('body', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))])),
                ('body_en', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))], null=True)),
                ('body_nl', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))], null=True)),
                ('format', models.CharField(choices=[(b'text', 'Story'), (b'audio', 'Audio'), (b'video', 'Video'), (b'images', 'Slideshow')], default='text', max_length=32, verbose_name='page_format')),
            ],
            options={
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
            },
            bases=('wagtailcore.page', models.Model, unusualbusiness.utils.models.RenderInlineMixin, unusualbusiness.utils.models.RelatedHowToMixin),
        ),
        migrations.CreateModel(
            name='StoryArticlePageOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TheoryArticleIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_nl', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('slug_en', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('slug_nl', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('url_path_en', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('url_path_nl', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('seo_title_nl', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('search_description_nl', models.TextField(blank=True, null=True, verbose_name='search description')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TheoryArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('title_nl', models.CharField(help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('slug_en', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('slug_nl', models.SlugField(help_text='The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/', max_length=255, null=True, verbose_name='slug')),
                ('url_path_en', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('url_path_nl', models.TextField(blank=True, editable=False, null=True, verbose_name='URL path')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('seo_title_nl', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('search_description_nl', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is Featured on home page')),
                ('subtitle', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, verbose_name='subtitle')),
                ('subtitle_en', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, null=True, verbose_name='subtitle')),
                ('subtitle_nl', models.CharField(blank=True, help_text='The subtitle of the page', max_length=255, null=True, verbose_name='subtitle')),
                ('featured', wagtail.wagtailcore.fields.StreamField([('featured_image', wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=True))])), ('featured_video', wagtail.wagtailcore.blocks.StructBlock([(b'video', wagtail.wagtailembeds.blocks.EmbedBlock(required=True))])), ('featured_audio', wagtail.wagtailcore.blocks.StructBlock([(b'audio', wagtail.wagtailembeds.blocks.EmbedBlock(required=True))]))])),
                ('publication_date', models.DateField(blank=True, default=django.utils.timezone.now, help_text='The publication date of the article', null=True, verbose_name='publication_date')),
                ('body', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))])),
                ('body_en', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))], null=True)),
                ('body_nl', wagtail.wagtailcore.fields.StreamField([('introduction', wagtail.wagtailcore.blocks.TextBlock(icon='italic', rows=3)), ('paragraph', wagtail.wagtailcore.blocks.RichTextBlock(icon='pilcrow')), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(icon='image')), ('pullquote', wagtail.wagtailcore.blocks.StructBlock([(b'pull_quote', wagtail.wagtailcore.blocks.TextBlock(required=True, rows=2, verbose_name='Pull quote')), (b'attribution', wagtail.wagtailcore.blocks.CharBlock(help_text='The name of the person or organization that the quote can be attributed to quote', required=False, verbose_name='Quote attribution to')), (b'link', wagtail.wagtailcore.blocks.URLBlock(help_text='Click quote to go to link.', required=False, verbose_name='Link'))]))], null=True)),
                ('format', models.CharField(choices=[(b'theory', 'Theory'), (b'audio', 'Audio'), (b'video', 'Video')], default='theory', max_length=32, verbose_name='page_format')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='articles.AuthorPage', verbose_name='author')),
            ],
            options={
                'verbose_name': 'Theory',
                'verbose_name_plural': 'Theories',
            },
            bases=('wagtailcore.page', models.Model, unusualbusiness.utils.models.RenderInlineMixin, unusualbusiness.utils.models.RelatedHowToMixin),
        ),
    ]
